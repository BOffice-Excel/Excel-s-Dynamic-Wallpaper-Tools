#include <Windows.h>
#include <stdio.h>
#include <io.h>
#pragma comment (lib,"User32.lib")

/*宏定义，BT=Button Type=按钮状态，在WndProc函数中被使用*/
#define BT_NORMAL 0 //鼠标未移到上方 
#define BT_MOUSEMOVE 1 //鼠标移到上方 
#define BT_CLICK 2 //被鼠标左键点击 

HINSTANCE HInstance; //程序的句柄，使用GetModuleHandle函数即可获得 
WNDCLASSEX wc; //窗口类，创建窗口时需要注册一个类才可以创建窗口，否则报错 
char RETURN[1145],*programName,Path[1145],*NameOfPro,CmdLine[1145];//一堆的字符串，大多都是临时的、在StartDwp函数中使用 
DWORD dw/*打开文件时的标记*/,BtnType[5]={BT_MOUSEMOVE,BT_MOUSEMOVE,BT_MOUSEMOVE,BT_MOUSEMOVE,BT_MOUSEMOVE}/*记住所有按钮状态*/;
HANDLE hFile;//文件句柄 
int W /*桌面宽度*/,H /*桌面高度*/,BtnWparam[5]={1,2,3,5,6}/*引用按钮事件ID标记*/;
bool quietMode=false;//是否启用安静模式（在启动dwp文件中） 
HWND hWnd,HWND_;//hWnd=托盘图标窗口句柄，HWND_=主窗口句柄 
NOTIFYICONDATA nid;//托盘图标数据 
HMENU FileMenu=CreatePopupMenu();//文件菜单，全局是因为托盘右键要用这个 
int WINAPI winMain(_In_ HINSTANCE,_In_opt_ HINSTANCE,_In_ LPSTR,_In_ int);
typedef BOOL WINAPI (*SPDA)(VOID);
SPDA SetProcessDPIAwarev;//设置该进程的DPI，不设会很丑且比例不太对 
char BtnName[5][30]={"新建配置文件","编辑配置文件","应用配置文件","停止动态壁纸","关于Dynamic Wallpaper Tools"};//按钮文本 
HFONT hFont = CreateFont(25, NULL, NULL, NULL, NULL, NULL, NULL, NULL, GB2312_CHARSET, NULL, NULL, NULL, NULL, TEXT("思源"));//默认字体 

//left->top->right->bottom
RECT BtnPos[5]={
	{20,20,220,70},{240,20,440,70},{460,20,660,70},{20,90,220,140},{240,90,660,140}
};//所有按钮的位置 

LONG GetRegValue(HKEY key,const char path[],const char keyname[],char value[]){//获取注册表的某个值 （无需管理员） 
    HKEY hKey;
    BYTE byData[255];
    LONG status = RegOpenKeyExA(key, path, 0, KEY_READ, &hKey);
    if (status != ERROR_SUCCESS) return status;
    DWORD dwSize = sizeof(byData),dwType;
    status = RegQueryValueExA(hKey, keyname, NULL, &dwType, byData, &dwSize);
    if (status != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return status;
    }
    strcpy(value,(char*)byData);
    RegCloseKey(hKey);
    return 0;
	/*使用原始方法需要管理员权限 
	LONG result;
    DWORD dwType,dwSize;
    HKEY hKey;
	result = RegOpenKeyEx(key, path, 0, KEY_READ, &hKey);
	if(result!=ERROR_SUCCESS) return result;
    result = RegGetValue(hKey,NULL,keyname,RRF_RT_REG_SZ,&dwType,value,&dwSize);
    RegCloseKey(hKey);
	return result;*/
}

LONG SetRegValue(HKEY key,const char path[],const char keyname[],char value[]){//设置注册表的某个值（需要管理员） 
 
    // 打开注册表项
    HKEY hKey;
    LONG result = RegOpenKeyExA(
        key, // 根键
        path, // 子键路径
        0, // 保留，必须是0
        KEY_SET_VALUE, // 访问权限
        &hKey // 返回打开的注册表项句柄
    );
 
    if (result == ERROR_SUCCESS) {
        // 设置注册表项的值
        result = RegSetValueExA(
            hKey, // 注册表项句柄
            keyname, // 值的名称
            0, // 保留，必须是0
            REG_SZ, // 值的类型
            (BYTE*)value, // 值的数据
            strlen(value)+1 // 数据的大小（包括结束符）
        );
 
        // 关闭注册表项
        RegCloseKey(hKey);
    }
    return result;
}

LONG DelRegValue(HKEY key,const char path[],const char keyname[]){//删除注册表中的某一项值 
    // 打开注册表项
    HKEY hKey;
    LONG result = RegOpenKeyExA(
        key, // 根键
        path, // 子键路径
        0, // 保留，必须是0
        KEY_SET_VALUE, // 访问权限
        &hKey // 返回打开的注册表项句柄
    );
 
    if (result == ERROR_SUCCESS) {
        result = RegDeleteValue(hKey,keyname);
        RegCloseKey(hKey);
    }
    return result;
}

BOOL CALLBACK EnumWindowProc(_In_ HWND hwnd, _In_ LPARAM Lparam)//核心！！！动态壁纸的嵌入窗口过程 
{
    HWND hDefView = FindWindowEx(hwnd, 0, "SHELLDLL_DefView", 0);
    if (hDefView != 0) {
        HWND hWorkerw = FindWindowEx(0, hwnd, "WorkerW", 0);
        HWND SCREEN = FindWindowEx(hWorkerw,0,"SysListView32",0);
        RECT rect;
        GetWindowRect(SCREEN,&rect);
        H=rect.bottom;
        W=rect.right;
        ShowWindow(hWorkerw, SW_HIDE);
        return FALSE;
    }
    return TRUE;
}

BOOL CALLBACK SetDPIWindowProc(_In_ HWND hwnd, _In_ LPARAM Lparam){
	return SetProcessDPIAwarev();
}

int GetNumberLength(int num){//获取数字长度（有多少位） 
	int cnt=0;
	while(num){
		cnt++;
		num/=10;
	}
	return cnt;
}
void NumToString(int n){//将数字转换为文本（返回值在RETURN数组中） 
	if(n==0){
		RETURN[0]='0';
		return;
	}
	int i=GetNumberLength(n)-1;
	memset(RETURN,0,sizeof RETURN);
	while(n){
		RETURN[i]=n%10+'0';
		n/=10;
		i--;
	}
}
bool OpenFileDlg(HWND ParentWindow, LPCSTR FileType, char Output_Path[]) {//打开文件对话框 
	OPENFILENAME ofn;
	TCHAR szFile[MAX_PATH] = {};

	ZeroMemory(&ofn, sizeof(ofn));//初始化打开文件的结构体 
	ofn.lStructSize = sizeof(ofn);
	ofn.lpstrFile = szFile;
	ofn.lpstrFile[0] = '\0';
	ofn.hwndOwner = ParentWindow;
	ofn.nMaxFile = sizeof(szFile);
	ofn.lpstrFilter = FileType;
	ofn.nFilterIndex = 1;
	ofn.lpstrInitialDir = NULL;
	ofn.lpstrFileTitle = NULL;
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
	if (!GetOpenFileName(&ofn)) return false;//失败 或者 用户点击了取消 
	else strcpy(Output_Path,ofn.lpstrFile);
	return true;//成功 
}
bool SaveFileDlg(HWND ParentWindow, LPCSTR FileType, char Output_Path[],const char typestr[]) {//保存文件对话框 
	OPENFILENAMEA ofn;
	char szFile[MAX_PATH] = {};

	ZeroMemory(&ofn, sizeof(ofn));//初始化保存文件的结构体 
	ofn.lStructSize = sizeof(ofn);
	ofn.lpstrFile = szFile;
	ofn.lpstrFile[0] = '\0';
	ofn.hwndOwner = ParentWindow;
	ofn.nMaxFile = sizeof(szFile);
	ofn.lpstrFilter = FileType;
	ofn.nFilterIndex = 1;
	ofn.lpstrInitialDir = NULL;
	ofn.lpstrFileTitle = NULL;
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

	if (!GetSaveFileNameA(&ofn)) return false;//失败 \ 用户点击了取消 
	else strcpy(Output_Path,ofn.lpstrFile);//复制文本 
	int i = strlen(ofn.lpstrFile);
	while (i>0&&((Output_Path)[i]) != '.' && ((Output_Path)[i]) != '\\') i--;
	if (((Output_Path)[i]) == '\\') strcat((Output_Path),(char*)"."), strcat((Output_Path), (char*)typestr);//判定是否有后缀名，没有就加一个默认的 
	return true;//成功！ 
}
DWORD WINAPI DwpThread(LPVOID lparam){//核心线程 
	if((!quietMode)&&MessageBox(NULL,"警告！此操作会终止所有mshta.exe进程，是否继续？","Warning",MB_YESNO|MB_ICONWARNING)!=6) return 0; //警告 
	char cmd[1145]=" \"",sound,VP[1145],TmpPath[MAX_PATH+20],str1[MAX_PATH*4];//初始化一堆文本 
	STARTUPINFO si = {0};
	PROCESS_INFORMATION pi = {0};//设置启动进程的结构体 
	
	SHELLEXECUTEINFO sei = {0};
    sei.cbSize = sizeof(SHELLEXECUTEINFO);
    sei.fMask = SEE_MASK_NOCLOSEPROCESS;
    sei.lpFile = "taskkill.exe";
    sei.nShow = SW_HIDE;
    sei.lpParameters = "/F /IM mshta.exe";
    if (ShellExecuteEx(&sei)) CloseHandle(sei.hProcess);//启动并结束mshta.exe 
    
	strcpy(str1,"<html>\
<META http-equiv=\"content-type\" content=\"text/html; charset=GBK\">\
<meta http-equiv=\"x-ua-compatible\" content=\"IE=9\"/>\
<head><title>VideoPlayer</title><HTA:APPLICATION APPLICATIONNAME=\"VideoPlayer\"ID=\"VideoPlayer\" BORDER=\"none\" SHOWINTASKBAR=\"no\" VERSION=\"0.0\"/></head>\
<body><video style=\"width:100%;height:100%;left:0px;top:0px;position:fixed\" autoplay loop");//设置文本 
	Sleep(500);
	
	dw=0;
	hFile=CreateFile(Path, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);//打开文件句柄 
	ReadFile(hFile,&sound,1,&dw,NULL);
	ReadFile(hFile,VP,GetFileSize(hFile,NULL)-1,&dw,NULL);
	for(int i=strlen(VP);!(VP[i]<='Z'&&VP[i]>='A'||VP[i]<='z'&&VP[i]>='a'||VP[i]<='9'&&VP[i]>='0');i--) VP[i]=NULL;//读入文件的数据 
	
	//使用mshta.exe播放
	GetTempPath(MAX_PATH,TmpPath);//获取临时目录并创建Temporary.hta临时文件 
	strcat(TmpPath,"Temporary.hta");
	if(TmpPath[strlen(TmpPath)-1]=='\r') TmpPath[strlen(TmpPath)-1]=NULL;
	freopen(TmpPath,"w",stdout);
	while(_access(VP,0)==-1) VP[strlen(VP)-1]=NULL;
	printf("%s%s><source src=\"%s",str1,(sound=='t'?"":" muted"),VP);
	strcpy(str1,"\" type=\"video/mp4\">ERROR</video></body></html>");
	printf("%s",str1);
	fclose(stdout);//退出写入 
	
	int width=GetDeviceCaps(GetDC(0), DESKTOPHORZRES),height=GetDeviceCaps(GetDC(0), DESKTOPVERTRES);//获取屏幕设备分辨率 
	memset(&si,NULL,sizeof si);
	memset(&pi,NULL,sizeof pi);
    strcat(cmd,TmpPath);
    strcat(cmd,"\"");
    GetSystemDirectory(str1,MAX_PATH);//获取系统的目录（System32） 
    strcat(str1,"\\mshta.exe");
	if(!CreateProcess(str1,cmd,NULL,NULL,NULL,NULL,NULL,NULL,&si,&pi)){//启动进程 
		if(!quietMode) MessageBox(NULL,"无法打开视频显示程序\"mshta.exe\"（使用浏览器播放视频），请检查系统目录下程序是否存在","错误！",MB_ICONERROR);
		if(quietMode) ExitProcess(0);
		else return 0;
	}
	
	while(FindWindow("HTML Application Host Window Class", 0)==NULL) Sleep(500);//找mshta的窗口 
	HWND hProgman = FindWindow("Progman", 0), hFfplay = FindWindow("HTML Application Host Window Class", 0);
	SendMessageTimeout(hProgman, 0x52C, 0, 0, 0, 100, 0);//延时发送消息 
	SetWindowPos(hFfplay, NULL, 0, 0, width, height, SWP_NOZORDER);//设置窗口大小和位置 
	SetParent(hFfplay, hProgman);//设置父窗口 
	EnumWindows(EnumWindowProc, 0);//将这个窗口放到桌面的后边 
	
	if(quietMode) ExitProcess(0);//说明用的是命令 
	else return 0;
}
bool isRunningAsAdmin() {//判定是否在管理员身份下运行 
    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken)) return false;//获取令牌 
    TOKEN_ELEVATION elevation;
    DWORD size;
    if (GetTokenInformation(hToken, TokenElevation, &elevation, sizeof(elevation), &size)) {
        CloseHandle(hToken);
        return elevation.TokenIsElevated > 0;
    }
 
    CloseHandle(hToken);
    return false;
}
bool runAsAdmin() {//在管理员身份中运行 
	if(isRunningAsAdmin()) return true;
    SHELLEXECUTEINFO sei = {0};
    sei.cbSize = sizeof(SHELLEXECUTEINFO);
    sei.fMask = SEE_MASK_NOCLOSEPROCESS;
    sei.lpFile = NameOfPro; // 当前应用程序的完整路径
    sei.lpVerb = "runas"; // 请求管理员权限
    sei.nShow = SW_SHOWNORMAL;
    sei.lpParameters = CmdLine;

    if (ShellExecuteEx(&sei)) {//启动！ 
        CloseHandle(sei.hProcess);
        ExitProcess(0);
        return true;
    }
 	ExitProcess(0);
 	return false;
}
void StartDwp(const char PathA[],bool Quiet){//创建启动Dwp进程 
	quietMode=Quiet;
	strcpy(Path,PathA);
	CreateThread(NULL,NULL,DwpThread,NULL,NULL,NULL);
}
/* This is where all the input to the window goes to */
LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam) {//窗口过程 
	switch (Message) {
		/* Upon destruction, tell the main thread to stop */
		case WM_DESTROY: {//销毁窗口 
			PostQuitMessage(0);
			break;
		}
		
		case WM_CLOSE: {//隐藏窗口 
			ShowWindow(hwnd,SW_HIDE);
			break;
		}
		
		case WM_MOUSEMOVE: {//当鼠标移动时 
			HDC DC=GetDC(hwnd);//获取HDC 
			SelectObject(DC,hFont);
			RECT WindowRect;//获取当前窗口位置 
			GetWindowRect(hwnd,&WindowRect);
			POINT mousePoint;
			GetCursorPos(&mousePoint);//获取当前鼠标位置 
			mousePoint.x-=WindowRect.left+10;
			mousePoint.y-=WindowRect.top;//计算使用左上角为0,0 
			mousePoint.y-=50;//计算误差 
			for(int i=0;i<5;i++){
				RECT Pos=BtnPos[i];
				if(mousePoint.x>=BtnPos[i].left&&mousePoint.y>=BtnPos[i].top&&mousePoint.x<=BtnPos[i].right&&mousePoint.y<=BtnPos[i].bottom){//寻找被鼠标碰到的按钮 
					if(BtnType[i]!=BT_MOUSEMOVE){//判断是否已经是这个状态，节约性能 
						RECT Pos1=Pos;
						Pos1.top+=18;
						FillRect(DC,&Pos,CreateSolidBrush(RGB(229,229,229)));//画矩形 
						SetBkColor(DC,RGB(229,229,229));
						DrawText(DC,BtnName[i],strlen(BtnName[i]),&Pos1,DT_CENTER|DT_VCENTER);//写入文本 
						MoveToEx(DC,Pos.left+5,Pos.bottom+1,NULL);//画线、搞出立体感 
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						MoveToEx(DC,Pos.right+1,Pos.top+5,NULL);
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						BtnType[i]=BT_MOUSEMOVE;//修改状态 
					}
				}
				else{
					if(BtnType[i]!=BT_NORMAL){//判断是否已经是这个状态，节约性能 
						RECT Pos1=Pos;
						Pos1.top+=18;
						FillRect(DC,&Pos,CreateSolidBrush(RGB(239, 239, 239)));//画矩形 
						SetBkColor(DC,RGB(239,239,239));
						DrawText(DC,BtnName[i],strlen(BtnName[i]),&Pos1,DT_CENTER|DT_VCENTER);//写文本 
						MoveToEx(DC,Pos.left+5,Pos.bottom+1,NULL);//画线，还是搞出立体感 
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						MoveToEx(DC,Pos.right+1,Pos.top+5,NULL);
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						BtnType[i]=BT_NORMAL;//修改标记状态 
					}
				}
			}
			break;
		}
		
		case WM_LBUTTONUP: {//当鼠标左键弹起时 
			HDC DC=GetDC(hwnd);//取HDC 
			SelectObject(DC,hFont);//设置字体 
			RECT WindowRect;//获取窗口位置 
			GetWindowRect(hwnd,&WindowRect);
			POINT mousePoint;//获取鼠标位置 
			GetCursorPos(&mousePoint);
			mousePoint.x-=WindowRect.left+10;
			mousePoint.y-=WindowRect.top;
			mousePoint.y-=50;//计算以窗口左上角为0,0的x,y坐标 
			for(int i=0;i<5;i++){
				RECT Pos=BtnPos[i];
				if(mousePoint.x>=BtnPos[i].left&&mousePoint.y>=BtnPos[i].top&&mousePoint.x<=BtnPos[i].right&&mousePoint.y<=BtnPos[i].bottom){//寻找被按下的按钮 
					if(BtnType[i]!=BT_MOUSEMOVE){//判断是否已经是这个状态，节约性能 
						RECT Pos1=Pos;
						Pos1.top+=18;
						FillRect(DC,&Pos,CreateSolidBrush(RGB(239,239,239)));//画矩阵 
						SetBkColor(DC,RGB(239,239,239));
						DrawText(DC,BtnName[i],strlen(BtnName[i]),&Pos1,DT_CENTER|DT_VCENTER);//画文本 
						MoveToEx(DC,Pos.left+5,Pos.bottom+1,NULL);//画线，仍然是立体感 
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						MoveToEx(DC,Pos.right+1,Pos.top+5,NULL);
						LineTo(DC,Pos.right+1,Pos.bottom+1); 
						BtnType[i]=BT_MOUSEMOVE;//更新状态 
						SendMessage(hwnd,WM_COMMAND,BtnWparam[i],NULL);//发送按下消息 
					}
					break;
				}
			}
			break;
		}
		
		case WM_LBUTTONDOWN: {//鼠标左键被按下 
			HDC DC=GetDC(hwnd);//获取HDC 
			SelectObject(DC,hFont);//设置字体 
			RECT WindowRect;
			GetWindowRect(hwnd,&WindowRect);//获取窗口坐标 
			POINT mousePoint;//获取鼠标坐标 
			GetCursorPos(&mousePoint);
			mousePoint.x-=WindowRect.left+10;
			mousePoint.y-=WindowRect.top;
			mousePoint.y-=50;//计算以主窗口的左上角为0,0时的鼠标坐标 
			for(int i=0;i<5;i++){
				RECT Pos=BtnPos[i];
				if(mousePoint.x>=BtnPos[i].left&&mousePoint.y>=BtnPos[i].top&&mousePoint.x<=BtnPos[i].right&&mousePoint.y<=BtnPos[i].bottom){//寻找被按下的按钮 
					if(BtnType[i]!=BT_CLICK){
						RECT Pos1=Pos;//复制RECT 
						Pos1.bottom+=5;
						Pos1.right+=5; 
						FillRect(DC,&Pos1,CreateSolidBrush(RGB(255,255,255)));//覆盖以前的 
						Pos1.bottom-=5;
						Pos1.right-=5;//恢复原始 
						Pos1.top+=20;
						Pos1.left+=2;//修改位置立体化 
						SetBkColor(DC,RGB(245,245,245));
						FillRect(DC,&Pos,CreateSolidBrush(RGB(239, 239, 239)));//画新的矩形 
						DrawText(DC,BtnName[i],strlen(BtnName[i]),&Pos1,DT_CENTER|DT_VCENTER);//画文本 
						MoveToEx(DC,Pos.left+2,Pos.top+2,NULL);//画两条线，立体 
						LineTo(DC,Pos.right-1,Pos.top+2); 
						MoveToEx(DC,Pos.left+2,Pos.top+2,NULL);
						LineTo(DC,Pos.left+2,Pos.bottom-2); 
						BtnType[i]=BT_CLICK;//修改状态 
						Sleep(100);
					}
					break;
				}
			}
			break;
		}
		
		case WM_COMMAND: {//当xxx被触发 
			switch (LOWORD(wParam)) {
				case 1:{//创建新的配置项 
					char Video[1145],SP[1145],chr;
					bool isSound=false;
					if(!SaveFileDlg(hwnd,"Dynamic Wallpaper配置文件（.dwp）\0*.dwp\0",SP,"dwp")) break;
					if(!OpenFileDlg(hwnd,"视频文件（.mp4）\0*.mp4\0视频文件（.mov）\0*.mov\0视频文件（.m4v）\0*.m4v\0视频文件（.mpg）\0*.mpg\0视频文件（.mpeg）\0*.mpeg\0视频文件（.wmv）\0*.wmv\0所有文件（*.*）\0*.*\0",Video)) break;
					isSound=(MessageBox(hwnd,"是否需要播放声音？","创建向导",MB_YESNO|MB_ICONQUESTION)==6);
					freopen(SP,"w",stdout);
					printf("%s",(isSound?"t":"f"));
					printf("%s",Video);
					fclose(stdout);
					if(MessageBox(hwnd,"配置文件生成完成，是否要马上启动？","Information",MB_YESNO|MB_ICONQUESTION)==6) StartDwp(SP,false);//启动！ 
					break;
				}
				case 2:{//编辑配置项 
					char SP[1145];
					if(!OpenFileDlg(hwnd,"Dynamic Wallpaper配置文件（.dwp）\0*.dwp\0",SP)) break;
					char sound,VP[1145],put;
					dw=0;
					hFile=CreateFile(SP, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
					ReadFile(hFile,&sound,1,&dw,NULL);
					ReadFile(hFile,VP,GetFileSize(hFile,NULL)-1,&dw,NULL);
					if(VP[strlen(VP)-1]=='\r') VP[strlen(VP)-1]=NULL;
					ChooseChangeObject:
					int c=MessageBox(hwnd,"请选择要修改的对象：\n 是->修改视频文件路径\n 否->修改是否有声音\n 取消->什么也不做","修改配置文件",MB_YESNOCANCEL|MB_ICONQUESTION);
					switch(c){
						case 6:{
							char STR[114514]="原来的值为：";
							strcat(STR,VP);
							strcat(STR,"\n是否要修改？");
							if(MessageBox(hwnd,STR,"请选择：",MB_YESNO|MB_ICONQUESTION)==6){
								if(OpenFileDlg(hwnd,"视频文件（.mp4）\0*.mp4\0视频文件（.mov）\0*.mov\0视频文件（.m4v）\0*.m4v\0视频文件（.mpg）\0*.mpg\0视频文件（.mpeg）\0*.mpeg\0视频文件（.wmv）\0*.wmv\0所有文件（*.*）\0*.*\0",VP))
									MessageBox(hwnd,"视频路径已修改完成！","Information",MB_ICONINFORMATION);
								else MessageBox(hwnd,"已取消修改视频路径。。。","Information",MB_ICONINFORMATION);
							}
							break;
						}
						case 7:{
							char STR[114514]="原来是否在使用动态壁纸时播放声音的值为：";
							strcat(STR,(sound=='t')?"是":"否");
							strcat(STR,"\n请选择：");
							sound=(MessageBox(hwnd,STR,"修改",MB_YESNO|MB_ICONQUESTION)==6)?'t':'f';
							break;
						}
						case 2:{
							goto DefExitChoose;
							break;
						}
					}
					goto ChooseChangeObject;
					DefExitChoose:
					if(MessageBox(hwnd,"是否要保存这次的修改？","修改",MB_YESNO|MB_ICONQUESTION)==6){
						freopen(SP,"w",stdout);
						printf("%s",(sound?"t":"f"));
						printf("%s",VP);
						fclose(stdout);
						if(MessageBox(hwnd,"是否要立即应用？","修改",MB_YESNO|MB_ICONQUESTION)==6){
							StartDwp(SP,false);//启动！ 
							Sleep(1000);
						}
					}
					break;
				}
				case 3:{//启动配置项 
					char SP[1145];
					if(!OpenFileDlg(hwnd,"Dynamic Wallpaper配置文件（.dwp）\0*.dwp\0",SP)) break;
					StartDwp(SP,false);//启动！ 
					Sleep(1000);
					break;
				}
				case 4:{//退出 
					PostQuitMessage(0);
					break;
				}
				case 5:{//结束动态壁纸（暴力） 
					if(MessageBox(hwnd,"此操作会结束所有mshta.exe进程，您要继续吗？","警告",MB_ICONWARNING|MB_YESNO)==6){
						system("taskkill /F /IM mshta.exe");
						if(MessageBox(hwnd,"是否需要重启dwm.exe？这可能会黑屏一会儿，Win11用户如果设置了直角会变回圆角，请慎重决定！","退出动态壁纸",MB_ICONQUESTION|MB_YESNO)==6){
							system("taskkill /F /IM dwm.exe");
							system("dwm.exe");
							MessageBox(hwnd,"dwm.exe已重启完成，您可以继续您的工作了！","Restart dwm.exe complete",MB_ICONINFORMATION); 
						}
					}
					break;
				}
				case 6:{//关于 
					if(MessageBox(hwnd,"程序制作：Office-Excel\n\
参考视频 by 偶尔有点小迷糊，视频地址：https://www.bilibili.com/video/BV1HZ4y1978a/（按下取消查看原视频）\n\
使用工具：Dev-C++，代码语言：C++\n\
项目开始日期：2024/04/21\n\
版本：不更新(null)","关于",MB_YESNO|MB_ICONINFORMATION)!=6) system("start https://www.bilibili.com/video/BV1HZ4y1978a/");
					break;
				}
				case 7:{//设置默认启动项 
					char SP[1145],outText[1145]="是否需要将这个配置项设置为默认项（包括启动默认项）";
					if(!OpenFileDlg(hwnd,"Dynamic Wallpaper配置文件（.dwp）\0*.dwp\0",SP)) break;
					strcat(outText,SP);
					if(MessageBox(hwnd,outText,"Question",MB_ICONQUESTION|MB_YESNO)==6){
						HKEY hKey; 
						DWORD disp;
						RegCreateKeyEx(
					        HKEY_CURRENT_USER,      // 根键
					        "Software\\DWPT",        // 子键路径
					        0,                       // 保留，必须为0
					        NULL,                    // 注册表项类型（我们不需要指定类型）
					        REG_OPTION_NON_VOLATILE, // 注册表项的类型
					        KEY_WRITE,               // 访问权限
					        NULL,                    // 如果类型和权限未指定，使用默认的安全描述符
					        &hKey,                   // 返回新创建或打开的注册表项的句柄
					        &disp                    // 返回值，指示注册表项是新创建还是已存在
					    );
						if(SetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","SrtDefCfgPath",SP)==ERROR_SUCCESS) MessageBox(HWND_,"默认配置项设置完成！","默认配置设置",MB_ICONINFORMATION);
						else MessageBox(HWND_,"默认配置项设置失败！","默认配置设置",MB_ICONERROR);
					}
					break;
				}
				case 8:{//修改启动的配置文件 
					char SP[1145];
					if(GetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","SrtDefCfgPath",SP)!=ERROR_SUCCESS) break;
					char sound,VP[1145],put;
					dw=0;
					hFile=CreateFile(SP, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
					ReadFile(hFile,&sound,1,&dw,NULL);
					ReadFile(hFile,VP,GetFileSize(hFile,NULL)-1,&dw,NULL);
					if(VP[strlen(VP)-1]=='\r') VP[strlen(VP)-1]=NULL;
					DefChooseChangeObject:
					int c=MessageBox(hwnd,"请选择要修改的对象：\n 是->修改视频文件路径\n 否->修改是否有声音\n 取消->什么也不做","修改配置文件",MB_YESNOCANCEL|MB_ICONQUESTION);
					switch(c){
						case 6:{
							char STR[114514]="原来的值为：";
							strcat(STR,VP);
							strcat(STR,"\n是否要修改？");
							if(MessageBox(hwnd,STR,"请选择：",MB_YESNO|MB_ICONQUESTION)==6){
								if(OpenFileDlg(hwnd,"视频文件（.mp4）\0*.mp4\0视频文件（.mov）\0*.mov\0视频文件（.m4v）\0*.m4v\0视频文件（.mpg）\0*.mpg\0视频文件（.mpeg）\0*.mpeg\0视频文件（.wmv）\0*.wmv\0所有文件（*.*）\0*.*\0",VP))
									MessageBox(hwnd,"视频路径已修改完成！","Information",MB_ICONINFORMATION);
								else MessageBox(hwnd,"已取消修改视频路径。。。","Information",MB_ICONINFORMATION);
							}
							break;
						}
						case 7:{
							char STR[114514]="原来是否在使用动态壁纸时播放声音的值为：";
							strcat(STR,(sound=='t')?"是":"否");
							strcat(STR,"\n请选择：");
							sound=(MessageBox(hwnd,STR,"修改",MB_YESNO|MB_ICONQUESTION)==6)?'t':'f';
							break;
						}
						case 2:{
							goto ExitChoose;
							break;
						}
					}
					goto DefChooseChangeObject;
					ExitChoose:
					if(MessageBox(hwnd,"是否要保存这次的修改？","修改",MB_YESNO|MB_ICONQUESTION)==6){
						freopen(SP,"w",stdout);
						printf("%s",(sound?"t":"f"));
						printf("%s",VP);
						fclose(stdout);
						if(MessageBox(hwnd,"是否要立即应用？","修改",MB_YESNO|MB_ICONQUESTION)==6){
							StartDwp(SP,false);
							Sleep(1000);
						}
					}
					break;
				}
				case 9:{//启动默认的配置文件 
					char SP[1145];
					if(GetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","SrtDefCfgPath",SP)!=ERROR_SUCCESS) break;
					StartDwp(SP,false);
					Sleep(1000);
					break;
				}
				case 10:{//切换是否开机自启动的状态 
		            UINT st=GetMenuState(FileMenu, 10, MF_BYCOMMAND);
					HKEY hKey; 
					DWORD disp;
					RegCreateKeyEx(
				        HKEY_CURRENT_USER,      // 根键
				        "Software\\DWPT",        // 子键路径
				        0,                       // 保留，必须为0
						NULL,                    // 注册表项类型（我们不需要指定类型）
					    REG_OPTION_NON_VOLATILE, // 注册表项的类型
				        KEY_WRITE,               // 访问权限
				        NULL,                    // 如果类型和权限未指定，使用默认的安全描述符
				        &hKey,                   // 返回新创建或打开的注册表项的句柄
				        &disp                    // 返回值，指示注册表项是新创建还是已存在
				    );
		            if (st == MF_CHECKED) {
		            	char str[]="false";
		            	if(DelRegValue(HKEY_CURRENT_USER,"Software\\Microsoft\\Windows\\CurrentVersion\\Run","DWPT")!=ERROR_SUCCESS){
		            		MessageBox(hwnd,"错误！无法修改注册表！","ERROR",MB_ICONERROR);
		            		break;
						}
						if(SetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","BLAS",str)!=ERROR_SUCCESS){
		            		MessageBox(hwnd,"错误！无法修改注册表！","ERROR",MB_ICONERROR);
		            		break;

						}
		                CheckMenuItem(FileMenu, 10, MF_UNCHECKED);
		            }
		            else {
		            	char str[]="true",ExePath[MAX_PATH+10];
		            	GetModuleFileName(NULL,ExePath,MAX_PATH);
		            	strcat(ExePath," -q");
		            	if(SetRegValue(HKEY_CURRENT_USER,"Software\\Microsoft\\Windows\\CurrentVersion\\Run","DWPT",ExePath)!=ERROR_SUCCESS){
		            		MessageBox(hwnd,"错误！无法修改注册表！","ERROR",MB_ICONERROR);
		            		break;
						}
						if(SetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","BLAS",str)!=ERROR_SUCCESS){
		            		MessageBox(hwnd,"错误！无法修改注册表！","ERROR",MB_ICONERROR);
		            		break;
						}
		                CheckMenuItem(FileMenu, 10, MF_CHECKED);
		            }
					break;
				}
				case 11: {//隐藏窗口 
					MessageBox(hwnd,"","",MB_OK);
					ShowWindow(hwnd,SW_HIDE);
					return 0;
				}
				case 12: {
					char EXECUTE_PATH[MAX_PATH*3];
					OpenFileDlg(hwnd,"可执行文件（*.exe）\0*.exe\0MS-DOS 应用程序（*.com）\0*.com\0指向 MS-DOS 程序的快捷方式（*.pif）\0*.pif\0",EXECUTE_PATH);
					STARTUPINFO si = {0};
					PROCESS_INFORMATION pi = {0};//设置启动进程的结构体 
					CreateProcess(EXECUTE_PATH,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&si,&pi);
					break;
				}
			}
			break;
		}
		default:
			return DefWindowProc(hwnd, Message, wParam, lParam);//默认窗口过程 
	}
	return 0;
}

LRESULT CALLBACK TrayNotificationCallback(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {//系统托盘图标窗口进程 
    switch (uMsg) {
    	case WM_CLOSE:{
        	PostQuitMessage(0);
			break;
		}
		case WM_USER:{
			switch(lParam){
				case WM_RBUTTONDOWN:{
					POINT p;
					GetCursorPos(&p);
		            TrackPopupMenu(FileMenu, TPM_LEFTALIGN | TPM_RIGHTBUTTON, p.x, p.y, NULL, HWND_, NULL);  //展示FileMenu 
					break;
				}
				case WM_LBUTTONDOWN:{
					ShowWindow(HWND_,SW_SHOW);
					break;
				}
			}
			break;
		}
		case WM_COMMAND:{
			WndProc(HWND_,WM_COMMAND,wParam,lParam);
			break;
		}
    }
    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

DWORD WINAPI nidThread(LPVOID lparam){//系统托盘图标主进程 
	MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    Shell_NotifyIcon(NIM_DELETE, &nid);
	return 0;
}

int main(int argc,char *argv[]) {//main函数 
	//处理命令行 
	if(argc>1) for(int i=0;i<strlen(argv[1]);i++) if(argv[1][i]>='A'&&argv[1][i]<='Z') argv[1][i]+='a'-'A';
	if(argc==2){
		if(strcmp(argv[1],"-q")==0){
			GetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","SrtDefCfgPath",RETURN);
			quietMode=true;
			strcpy(Path,RETURN);
			DwpThread(NULL);
			return 0;
		}
		strcpy(CmdLine,argv[1]);
	}
	else if(argc==3){
		if(strcmp(argv[1],"-o")==0){
			if(argv[2][0]=='"') argv[2]++;
			if(argv[2][strlen(argv[2])-1]=='"') argv[2][strlen(argv[2])-1]=NULL;
			quietMode=true;
			strcpy(Path,argv[2]);
			DwpThread(NULL);
			return 0;
		}
	}
	NameOfPro = argv[0];//当前程序目录+名称 
	runAsAdmin();
	programName = argv[0];
	for(int i=strlen(programName)-1;i>=0;i--){//获取当前位置 
		if(programName[i]!='\\') programName[i]=NULL;
		else break;
	}
	return winMain(
		GetModuleHandle(NULL),//获取本程序的句柄
		NULL,//这个参数为什么需要我也不知道
		CmdLine,//命令行，这里为空
		SW_SHOW//定义窗口展示方式，参数传给ShowWindow函数，这里为SW_SHOW
	);
}

/* The 'main' function of Win32 GUI programs: this is where execution starts */
int WINAPI winMain(_In_ HINSTANCE hINstance,_In_opt_ HINSTANCE hPrevInstance,_In_ LPSTR lpCmdLine,_In_ int nShowCmd) {
	HMODULE hModule = LoadLibrary("user32.dll");
	SetProcessDPIAwarev = (SPDA)GetProcAddress(hModule,"SetProcessDPIAware");
	SetProcessDPIAwarev();//清晰！！！ 
	
	HInstance = GetModuleHandle(NULL);
	WNDCLASS wc1 = {};
    wc1.lpfnWndProc = TrayNotificationCallback;
    wc1.hInstance = GetModuleHandle(NULL);
    wc1.lpszClassName = "TrayIconWindowClass";
    if(!RegisterClass(&wc1)){//注册系统托盘图标窗口类 
    	MessageBox(NULL,"Tray Icon Registration Failed!","Error",MB_ICONWARNING|MB_OK);
    	return 0;
	}
    hWnd = CreateWindowEx(0, wc1.lpszClassName, "TrayIconWindow", 0, 0, 0, 0, 0, HWND_MESSAGE, 0, wc1.hInstance, 0);
	//创建 
    nid.cbSize = sizeof(NOTIFYICONDATA);
    nid.hWnd = hWnd;
    nid.uID = 10000;
    nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
    nid.uCallbackMessage = WM_USER;
    nid.hIcon = LoadIcon(hINstance,"A"); // 从资源加载图标
    strcpy(nid.szTip,"Dynamic Wallpaper Tools");
    Shell_NotifyIcon(NIM_ADD,&nid);
    
    CreateThread(NULL,NULL,nidThread,NULL,NULL,NULL);//启动线程 
    Sleep(200);
    
	MSG msg; /* A temporary location for all messages */

	/* zero out the struct and set the stuff we want to modify */
	memset(&wc, 0, sizeof(wc));//注册主窗口类 
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.lpfnWndProc = WndProc; /* This is where we will send messages to */
	wc.hInstance = HInstance;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.style=CS_DBLCLKS|CS_SAVEBITS|CS_GLOBALCLASS;

	/* White, COLOR_WINDOW is just a #define for a system color, try Ctrl+Clicking it */
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wc.lpszClassName = "DWPT_PRIVATECLASS";
	wc.hIcon = LoadIcon(hINstance,"A"); /* Load a standard icon */
	wc.hIconSm = LoadIcon(hINstance,"A"); /* use the name "A" to use the project icon */

	if (!RegisterClassEx(&wc)) {
		MessageBox(NULL, "Window Registration Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);//判断是否成功 
		return 0;
	}
	
	HMENU menu=CreateMenu(),OPEN=CreatePopupMenu(),AboutMenu=CreatePopupMenu(),DefMenu=CreatePopupMenu(),ToolMenu=CreatePopupMenu();//添加菜单项 
	GetRegValue(HKEY_CURRENT_USER,"Software\\DWPT","BLAS",RETURN);
	AppendMenu(FileMenu,((strcmp(RETURN,"true")==0)?MF_CHECKED:MF_UNCHECKED),10,"开机自启动");
	AppendMenu(OPEN,MF_STRING,2,"编辑");
	AppendMenu(OPEN,MF_STRING,3,"应用");
	AppendMenu(OPEN,MF_STRING,7,"设置为默认配置");
	AppendMenu(DefMenu,MF_STRING,8,"编辑");
	AppendMenu(DefMenu,MF_STRING,9,"应用");
	AppendMenu(FileMenu,MF_STRING,1,"新建（&N）");
	AppendMenu(FileMenu,MF_HILITE,0,NULL);
	AppendMenu(FileMenu,MF_POPUP,(UINT_PTR)DefMenu,"打开默认项并...（&O）");
	AppendMenu(FileMenu,MF_POPUP,(UINT_PTR)OPEN,"打开并...（&O）");
	AppendMenu(FileMenu,MF_HILITE,0,NULL);
	AppendMenu(FileMenu,MF_STRING,5,"结束动态壁纸（&E）");
	AppendMenu(FileMenu,MF_STRING,4,"退出（&Q）");
	AppendMenu(menu,MF_POPUP,(UINT_PTR)FileMenu,"操作（&F）");
	AppendMenu(ToolMenu,MF_STRING,12,"使用清晰模式启动程序（仅Win11）");
	AppendMenu(menu,MF_POPUP,(UINT_PTR)ToolMenu,"工具箱（&T）");
	AppendMenu(AboutMenu,MF_STRING,6,"关于（&A）");
	AppendMenu(menu,MF_POPUP,(UINT_PTR)AboutMenu,"帮助（&H）");
	
	HWND_ = CreateWindowEx(WS_EX_ACCEPTFILES,"DWPT_PRIVATECLASS", "Dynamic Wallpaper Tools", WS_VISIBLE | WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | DS_FIXEDSYS | DS_3DLOOK | DS_SETFONT | DS_MODALFRAME | DS_NOIDLEMSG,
		CW_USEDEFAULT, /* x */
		CW_USEDEFAULT, /* y */
		800, /* width */
		400/*60*/, /* height */
		NULL, menu, HInstance, NULL);//创建窗口 

	if (HWND_ == NULL) {//判断是否成功 
		MessageBox(NULL, "Window Creation Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
		return 0;
	}
	
	HMENU hMenu=GetSystemMenu(HWND_,FALSE);
	AppendMenu(hMenu,MF_HILITE,0,NULL);
	AppendMenu(hMenu,MF_STRING,11,"缩小到系统托盘");
	AppendMenu(hMenu,MF_STRING,4,"彻底退出");//修改窗口的默认系统菜单 

	/*
		This is the heart of our program where all input is processed and
		sent to WndProc. Note that GetMessage blocks code flow until it receives something, so
		this loop will not produce unreasonably high CPU usage
	*/
	ShowWindow(HWND_, nShowCmd);
	SendMessageTimeout(HWND_,WM_MOUSEMOVE,NULL,NULL,NULL,500,NULL);
	while (GetMessage(&msg, NULL, 0, 0) > 0) { /* If no error is received... */
		TranslateMessage(&msg); /* Translate key codes to chars if present */
		DispatchMessage(&msg); /* Send it to WndProc */
	}//主循环 
	
	return (int)msg.wParam;//返回值 
}
